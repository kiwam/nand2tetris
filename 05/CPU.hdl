// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Decode instructions
    // i = instruction[15]
    // a = instruction[12]
    // c[6] = instruction[6..11]
    // d[3] = instruction[3..5]
    // j[3] = instruction[0..2]

    // Mux for A/C-instruction
    Mux16(a=instruction, b=oALU, sel=instruction[15], out=oMUXAReg);
    
    Not(in=instruction[15], out=Ainstruction);
    Or(a=Ainstruction, b=instruction[5], out=loadAReg); // A-inst or (C-inst and d1-bit)
    ARegister(in=oMUXAReg, load=loadAReg, out=oAReg, out[0..14]=addressM);

    And(a=instruction[15], b=instruction[4], out=loadDreg);
    DRegister(in=oALU, load=loadDreg, out=oDReg);

    And(a=instruction[15], b=instruction[12], out=selAorM);
    Mux16(a=oAReg, b=inM, sel=selAorM, out=oMuxAorM);

    ALU(x=oDReg, y=oMuxAorM,
        zx=instruction[11], nx=instruction[10], zy=instruction[9],
        ny=instruction[8], f=instruction[7], no=instruction[6],
        out=oALU, out=outM, zr=oALUzr, ng=oALUng);

    And(a=oALUng, b=instruction[2], out=w1);
    And(a=oALUzr, b=instruction[1], out=w2);

    // PC
    Or(a=oALUng, b=oALUzr, out=ngzr);
    Not(in=ngzr, out=nngzr);          // not(ng) and not(zr)
    And(a=nngzr, b=instruction[0], out=w3);

    Or(a=w1, b=w2, out=w12);
    Or(a=w12, b=w3, out=jumpCondition);
    
    And(a=instruction[15], b=jumpCondition, out=jump);
    Not(in=jump, out=noJump);
    
    PC(in=oAReg, load=jump, inc=noJump, reset=reset, out[0..14]=pc);

    And(a=instruction[15], b=instruction[3], out=writeM); 

}